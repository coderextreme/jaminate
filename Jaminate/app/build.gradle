/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    //jcenter() // for schemagen
}
configurations {
	schemagen
}
dependencies {
    // Use JUnit Jupiter for testing.
    // testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.2")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
    // https://mvnrepository.com/artifact/jakarta.xml.bind/jakarta.xml.bind-api
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.0'
    // implementation 'org.jsoup:jsoup:1.16.1'
    // toCopy 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
    // toCopy 'org.glassfish.jaxb:jaxb-runtime:3.0.2'

    annotationProcessor 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    annotationProcessor 'org.glassfish.jaxb:jaxb-runtime:2.3.3'
    annotationProcessor 'javax.annotation:javax.annotation-api:1.3.2'
    schemagen (
        'jakarta.xml.bind:jakarta.xml.bind-api:3.0.0-RC3',
        'jakarta.activation:jakarta.activation-api:2.0.0-RC3',
        'com.sun.xml.bind:jaxb-jxc:3.0.0-M4',
        'com.sun.xml.bind:jaxb-osgi:3.0.0-M4',
        'javax.xml.bind:jaxb-api:2.4.0-b180830.0359')
}

def srcDir = file("src/main/java/net/coderextreme/jaminate/")
def schemaDir = file("src/main/resources/schema")

task schemagen {
        doLast {
            ant.taskdef(name: 'schemagen', classname: 'com.sun.tools.jxc.SchemaGenTask', classpath: configurations.schemagen.asPath)
            schemaDir.mkdirs()
            ant.schemagen(
                srcdir: srcDir,
                destdir: schemaDir,
                includeAntRuntime: false,
                debug: true,
                verbose: true){
                schema(file: "htmlsample.xsd", namespace: "")
                classpath {
                    pathelement(path: configurations.schemagen.asPath)
                }
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(20)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'net.coderextreme.jaminate.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

/* Copies the javadoc files to project 'lib/javadoc' folder
task copyJavadocs(type: Copy) {
    from {
        dependencies.createArtifactResolutionQuery()
            .forComponents(
                 configurations.compile.incoming.resolutionResult
                     .allDependencies.collect { it.selected.id }
            )
            .withArtifacts(JvmLibrary, JavadocArtifact)
            .execute()
            .resolvedComponents
            .collectMany {
                it.artifactResults
                    .collect { it.file.path }
            }
    }
    into "$projectDir/doc/lib/javadoc"
}
*/
